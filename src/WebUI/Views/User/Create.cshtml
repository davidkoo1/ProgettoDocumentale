@model BLL.DTO.CreateUserDto

@if (TempData["ErrorUser"] != null)
{
    <div class="alert alert-danger">
        <strong>Sorry!</strong> - @TempData["ErrorUser"]
    </div>
}

@using (Html.BeginForm("Create", "User", FormMethod.Post, new { id = "createUserForm", @class = "needs-validation", novalidate = "novalidate" }))
{
    <div class="modal-body">
        @Html.AntiForgeryToken()


        <div class="mb-3 row">
            @Html.LabelFor(model => model.UserName, new { @class = "col-sm-3 form-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @autocomplete = "username", placeholder = "Enter username" })
                @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "text-danger" })
            </div>
            <br>
        </div>

        <div class="mb-3 row">
            @Html.LabelFor(model => model.Name, "First Name", new { @class = "col-sm-3 form-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = "Enter first name" })
                @Html.ValidationMessageFor(model => model.Name, null, new { @class = "text-danger" })
            </div>
            <br>
        </div>

        <div class="mb-3 row">
            @Html.LabelFor(model => model.Surname, "Last Name", new { @class = "col-sm-3 form-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(model => model.Surname, new { @class = "form-control", placeholder = "Enter last name" })
                @Html.ValidationMessageFor(model => model.Surname, null, new { @class = "text-danger" })
            </div>
            <br>
        </div>


        <div class="mb-3 row">
            @Html.LabelFor(model => model.Patronymic, "Patronymic", new { @class = "col-sm-3 form-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(model => model.Patronymic, new { @class = "form-control", placeholder = "Enter patronymic" })
                @Html.ValidationMessageFor(model => model.Patronymic, null, new { @class = "text-danger" })
            </div>
            <br>
        </div>

        <div class="mb-3 row">
            @Html.LabelFor(model => model.Email, "Email", new { @class = "col-sm-3 form-label" })
            <div class="col-sm-9">
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "Enter email address", type = "email" })
                @Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3 row">
            <label class="col-sm-3 form-check-label" for="IsEnabled">Enable</label>
            <div class="col-sm-9">
                <div class="form-check form-switch">
                    @Html.CheckBoxFor(model => model.IsEnabled, new { @class = "form-check-input", id = "IsEnabled" })
                    @Html.ValidationMessageFor(model => model.IsEnabled, null, new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="mb-3 row">
            @Html.LabelFor(model => model.RolesId, "Roles", new { @class = "col-sm-3 form-label" })
            <div class="col-sm-9">
                @Html.ListBoxFor(model => model.RolesId, new MultiSelectList(ViewBag.Roles, "Value", "Text"), new { @class = "form-control selectpicker", data_live_search = "true", @title = "Choose..." })
                @Html.ValidationMessageFor(model => model.RolesId, null, new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-success" style="width: 100px;" onclick="handleSubmitButton('#createUserForm')">Save</button>
        <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Cancel</button>
    </div>
}

<script type="text/javascript">
    $(document).ready(function () {
        $('.selectpicker').selectpicker();
    });
</script>
